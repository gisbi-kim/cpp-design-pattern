// For study
//  see https://swk3169.tistory.com/169

/* The below code was generated by ChatGPT
Q1
  Is there an element similar to Java's interface syntax in C++?
A1
  Yes, C++ has a concept similar to Java's interface known as an abstract class. An abstract class is a class that contains one or more pure virtual functions, which are denoted by the "= 0" syntax. These pure virtual functions act as placeholders for functions that must be defined in derived classes. Abstract classes cannot be instantiated and serve as a blueprint for creating derived classes.
Q2
  give me an example, particulurly on strategy pattern.
A2
  (The code below)
  In this example, the abstract class SortStrategy defines the interface for sorting algorithms. QuickSort and BubbleSort are concrete implementations of this interface. The Sorter class uses the SortStrategy to sort an array of integers. The client code can switch between different sorting algorithms by changing the sort strategy set in Sorter.
*/

// can be tested at https://www.onlinegdb.com/online_c++_compiler

#include <iostream>

class SortStrategy {
 public:
  virtual void sort(int* arr, int size) = 0;
};

class QuickSort : public SortStrategy {
 public:
  void sort(int* arr, int size) {
    std::cout << "Quick sorting the array\n";
  }
};

class BubbleSort : public SortStrategy {
 public:
  void sort(int* arr, int size) {
    std::cout << "Bubble sorting the array\n";
  }
};

class Sorter {
 private:
  SortStrategy* sort_strategy_;

 public:
  void set_sort_strategy(SortStrategy* sort_strategy) {
    sort_strategy_ = sort_strategy;
  }

  void sort(int* arr, int size) {
    sort_strategy_->sort(arr, size);
  }
};

int main() {
  Sorter sorter;
  int arr[] = {1, 3, 2};
  int size = sizeof(arr) / sizeof(int);

  sorter.set_sort_strategy(new QuickSort());
  sorter.sort(arr, size);

  sorter.set_sort_strategy(new BubbleSort());
  sorter.sort(arr, size);

  return 0;
}
